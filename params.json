{"name":"Impress","tagline":"Impress Application Server for node.js. All decisions are made. Ready for applied development.","body":"[![impress logo](http://habrastorage.org/files/d67/1b3/be5/d671b3be591d47a9bd10fe857e9d5319.png)](https://github.com/tshemsedinov/impress)\r\n\r\n[![Build Status](https://travis-ci.org/tshemsedinov/impress.svg?branch=master)](https://travis-ci.org/tshemsedinov/impress)\r\n[![Dependency Status](https://david-dm.org/tshemsedinov/impress.svg)](https://david-dm.org/tshemsedinov/impress)\r\n[![devDependency Status](https://david-dm.org/tshemsedinov/impress/dev-status.svg)](https://david-dm.org/tshemsedinov/impress#info=devDependencies)\r\n[![NPM version](https://badge.fury.io/js/impress.svg)](http://badge.fury.io/js/impress)\r\n[![Codacy Badge](https://www.codacy.com/project/badge/6fb7b607a9cb445984aebbc08fdeb13c)](https://www.codacy.com/public/tshemsedinov/impress)\r\n\r\n[Impress](https://github.com/tshemsedinov/impress) Application Server for [node.js](http://nodejs.org). All decisions are made. Solutions are scaled. Tools are provided and optimized for high load. Ready for applied development and production.\r\n\r\nImpress follows alternative way in several aspects:\r\n  - No callback chain (no middleware), hierarchically inheritable hash routing instead\r\n  - Monolithic high coupling core with obligatory things optimized for performance\r\n  - Extensible plug-ins format for optionally needed things\r\n  - Applied code simplicity, API code high-level abstraction and brevity\r\n  - Support for both Stateful and Stateless approach\r\n  - Application can't include Application Server, quite the opposite, Application Server is a container for Applications\r\n  - No I/O is faster even then async I/O, so maximum memory usage and lazy I/O is the choice\r\n\r\n## Installation and upgrade\r\n\r\n  - Install to project folder (mostly for development): `npm install impress` and configure\r\n  - Install as a service for Linux: create directory `/impress` and type: `npm install impress`\r\n  - Install using package.json and `npm install`: not recommended but if you know what you're doing...\r\n  - Installation scripts for empty server (from the scratch)\r\n    - For CentOS 6 /deploy/centos6x32.sh and centos6x64.sh (tested on CentOS 6.6 32/64bit minimal)\r\n    - For CentOS 7 /deploy/centos7x64.sh (tested on CentOS 7.0 with systemd 64bit minimal)\r\n    - For Ubuntu 14 /deploy/ubuntu.sh (tested on Ubuntu 14.04 64bit minimal)\r\n    - For Debian 7 /deploy/debian.sh (tested for Debian 7.5 64bit minimal)\r\n  \r\nYou can prepare scripts based on examples above and run at a target server shell:\r\n`curl http://host/path/install.sh | sh` or `wget http://host/path/install.sh -O - | sh`\r\n\r\nTo upgrade Impress version you can type 'npm update' in Impress folder, but if Impress installed as a service it is better to use service CLI, see commands below.\r\nIf Impress Application Server is already installed in directory you want to install/update it using npm, /applications directory contains applications and /config contains configuration, you do not have to worry Impress will detect previous installation and will update just it's own libraries and dependencies.\r\n\r\n## Service (daemon) commands\r\n\r\nIf Impress installed as a service (daemon) you can use following commands:\r\n  - `service impress start` or `systemctl start impress` (for systemd)\r\n  - `service impress stop` or `systemctl stop impress` (for systemd)\r\n  - `service impress restart` or `systemctl restart impress` (for systemd)\r\n  - `service impress status` or `systemctl status impress` to show CPU, MEM, RSS, TIME and other parameters\r\n  - `service impress update` to update and restart Application Server\r\n\r\n## Features\r\n\r\n  - Can serve multiple applications and sites on multiple domains\r\n  - Serves multiple ports, network interfaces, hosts and protocols\r\n  - Can scale on multiple servers\r\n  - Supports application sandboxing (configuration, db and memory access isolation)\r\n  - Supports one or multiple CPU cores with following instantiation strategies:\r\n    - Single instance (one process)\r\n    - Instance specialization (multiple processes, one master and different workers for each server)\r\n    - Multiple instances (multiple processes, one master and identical workers with no sticky)\r\n    - IP sticky (multiple processes, one master and workers with serving sticky by IP)\r\n  - URL routing based on file system\r\n    - Caching server-side executable JavaScript in memory\r\n    - File system watching for cache reloading when file changes on disk\r\n  - Handlers inheritance override override hierarchically uning filesystem\r\n  - Middleware emulation (adding URL routing to handler-functions programmatically)\r\n  - API development support (simple way for JSON-based WEB-services development)\r\n    - RPC-style API (Stateful, state stored in memory between requests)\r\n    - REST-style API (Stateless, each call is separate, no state in memory)\r\n    - Impress RPC (long live and full duplex RPC via websocket)\r\n  - Multiple handlers (all handlers are optional and inheritable/overridable):\r\n    - access.js - returns access modifiers\r\n    - request.js - executing for all requests (any HTTP verbs and before verb handler)\r\n    - HTTP verbs: get.js, post.js, etc. - executes for certain HTTP verb\r\n    - end.js - executes after HTTP verb handler for all verbs\r\n    - lazy.js - lazy handler executes after the request has already returned to the client-side\r\n    - error.js - executed only if an error occurred while processing the request or in any previous handler\r\n  - Supported multiple RPC result types:\r\n    - JSON for most APIs (including safe serialization)\r\n    - JSONP (for cross-domain requests)\r\n    - CSV (JavaScript Object Notation)\r\n    - HTML (aor any extension unknown for IAS) - for AJAX server-side HTML rendering\r\n  - Server server-side simple templating\r\n    - Caching templates in memory and ready (rendered) pages optional caching\r\n    - Supports array and hash iterations and sub-templates including\r\n    - Template personalization for user groups\r\n  - Application config changes with zero downtime\r\n    - Flexible configuration in JS or JSON format\r\n    - File watch and automatic soft reloading when config.js file changes\r\n    - No Impress server hard restarting\r\n  - Serving static files\r\n    - Gzipping and HTTP request field \"if-modified-since\" field support and HTTP 304 \"Not Modified\" answer\r\n    - Memory caching and file system watching for cache reloading when files changed on disk\r\n    - JavaScript optional (configurable) minification, based on module \"uglify-js\" as Impress plug-in\r\n  - Built-in sessions support with authentication and user groups and anonymous sessions\r\n    - Sessions and cookies (memory state or persistent sessions with MongoDB)\r\n    - Access modifiers for each folder in access.js files and access inheritance\r\n  - Multiple protocols support:\r\n    - HTTP and HTTPS (node native libraries)\r\n    - Implemented SSE (Server-Sent Events) with channels and multi-cast\r\n    - WebSockets support (even on shared host/port with other handlers, using regular connection upgrade)\r\n    - TCP and UDP sockets support\r\n  - Reverse-proxy (routing request to external HTTP server with URL-rewriting)\r\n  - Logging: \"access\", \"debug\", \"error and \"slow\" logs\r\n    - Log rotation: keep logs N days (configurable) delete files after N days\r\n    - Log buffering, write stream flushing interval\r\n    - Each application can be logged to own folder and/or to server-wide logs\r\n  - Connection drivers for database engines:\r\n    - MySQL data access layer based on felixge/mysql low-level drivers (separate module \"musql-utilities\")\r\n      - MySQL Data Access Methods: queryRow, queryValue, queryCol, queryHash, queryKeyValue\r\n      - MySQL Introspection Methods: primary, foreign, constraints, fields, databases, tables, databaseTables, tableInfo, indexes, processes, globalVariables, globalStatus, users\r\n      - MySQL SQL Autogenerating Methods: select, insert, update, upsert, count, delete\r\n      - Events: 'query', 'slow'\r\n    - MongoDB drivers as Impress plug-in\r\n    - PgSQL drivers as Impress plug-in\r\n    - Memcached drivers as Impress plug-in\r\n    - Relational schema generator from JSON database schemas\r\n  - Sending Emails functionality using \"nodemailer\" module as Impress plug-in\r\n  - File utilities: upload, download, streaming\r\n  - Integrated DBMI (Web-based management interface for MySQL and MongoDB)\r\n  - GeoIP support, based on \"geoip-lite\" module as Impress plug-in (uses MaxMind database)\r\n  - Social networking login using Passport.js as plug-in\r\n  - Built-in simple testing framework\r\n  - Server health monitoring\r\n  - Static preprocessing:\r\n    - js minification using uglify-js\r\n    - sass / scss - Syntactically Awesome Stylesheets\r\n  - Built-in data structures validation and preprocessing library\r\n  - Process forking:\r\n    - Long workers with \"client\" object forwarding to separate process\r\n    - Task scheduling (interval or certain time)\r\n  - Cross-process communication\r\n    - IPC support (interprocess communications) for event delivery between Node.js instances\r\n    - ZMQ support (Zero MQ) ar an alternative event delivery transport\r\n    - State synchronization mechanism with transactions and subscription\r\n  - Implemented V8 features support:\r\n    - Long stack trace with --stack-trace-limit=1000 and stack output minification\r\n    - Wrapper for V8 internal functions with --allow-natives-syntax\r\n    - Manual garbage collection with --nouse-idle-notification --expose-gc\r\n  - HTTP base authentication implemented (optional omitting local requests)\r\n\r\n## Examples  \r\nExample #1  \r\nTo create GET request handler for URL `/api/method.json`  \r\nFile /api/method.json/get.js\r\n```javascript\r\nmodule.exports = function(client, callback) {\r\n  callback({ field: 'value' });\r\n}\r\n```\r\nResult: `{ \"field\": \"value\" }`\r\n\r\nExample #2  \r\nTo create POST request handler for URL `/api/method.json`  \r\nFile /api/method.json/post.js\r\n```javascript\r\nmodule.exports = function(client, callback) {\r\n  dbImpress.users.find({ group: client.fields.group }).toArray(function(err, nodes) {\r\n    callback(nodes);\r\n  });\r\n}\r\n```\r\nResult:\r\n```javascript\r\n[\r\n  { \"login\": \"Vasia Pupkin\", \"password\": \"whoami\", \"group\": \"users\" },\r\n  { \"login\": \"Marcus Aurelius\", \"password\": \"tomyself\", \"group\": \"users\" }\r\n]\r\n```\r\n\r\nExample #3  \r\nFile \"access.js\" is something line \".htaccess\", you can easily define access restrictions for each folder, placing \"access.js\" in it.  \r\nIf folder not contains \"access.js\" it will inherit from parent folder and so on. Example:\r\n```javascript\r\nmodule.exports = {\r\n  guests:  true,  // Allow requests from anonimous users (not logged or no session)\r\n  logged:  true,  // Allow requests from logged users\r\n  http:    true,  // Allow requests using http protocol\r\n  https:   true,  // Allow requests using https protocol\r\n  groups:  [],    // Allow access for user groups listed in array\r\n                  //   or for all if array is empty or no groups field specified\r\n  intro:   true,  // Generate introspection for API methods in this directory\r\n  index:   false, // Generate directory index\r\n  virtual: true   // Allow requests to virtual paths, for CMS and REST URLs, etc.\r\n}\r\n```\r\n\r\n## Configuration\r\n\r\n1. Install Impress as described above.\r\n2. Edit `/config/*.js` to configure Application Server (set IP address in servers.js)\r\n3. After installation you have `example` application in directory `/applications`, you can rename it and/or place there other applications\r\n4. Edit `/applications/example/config/hosts.js`, change `127.0.0.1` to `myapp.com`, certainly you need to register and configure domain name myapp.com or just add it into `hosts` file in your OS\r\n5. Place your html to `/applications/example/app/html.template` and copy required files into directories `/static/js`, `/static/css`, `/static/images` and start application API development\r\n6. Run Impress using command `service impress start` or `systemctl start impress` (if installed as a service) or `node server.js`\r\n\r\n## Contributors\r\n\r\n  - Timur Shemsedinov (marcusaurelius)\r\n  - See github for full [contributors list](https://github.com/tshemsedinov/impress/graphs/contributors)\r\n\r\n## License\r\n\r\nDual licensed under the MIT or RUMI licenses.\r\n\r\nCopyright (c) 2012-2015 MetaSystems &lt;timur.shemsedinov@gmail.com&gt;\r\n\r\nRUMI License: Everything that you want, you are already that.  \r\n// Jalal ad-Din Muhammad Rumi\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}