{"name":"Impress","tagline":"Impressive totalitarian-style Application Server for node.js. All decisions are made. Ready for applied development.","body":"![impress logo](http://habrastorage.org/storage2/c1e/1b7/190/c1e1b7190c8c6685a34d6584e936c4c9.png)\r\n\r\n# Impress\r\n\r\n[Impress](https://github.com/tshemsedinov/impress.git)ive totalitarian-style Application Server for [node.js](http://nodejs.org). All decisions are made. Ready for applied development.\r\n\r\nThe main difference from others that Impress core is monolithic and its approach is to make all in one solution with high code coupling for obligatory things and leave not obligatory to be integrated by applied developers optionally. High coupling in core gives us advantages in performance and code simplicity. For example, why we should implement static files serving or memory caching as a plugin while no one application will omit that.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install impress\r\n```\r\n\r\n## Features\r\n\r\n  - Can serve multiple applications and sites on multiple domains\r\n  - Serves multiple ports, network interfaces, hosts and protocols\r\n  - Can be run on one or multiple servers\r\n  - Supports one or multiple CPU cores with following instantiation strategies:\r\n    - Single instance (one process)\r\n    - Instance specialization (multiple processes, one master and different workers for each server)\r\n    - Multiple instances (multiple processes, one master and identical workers with no sticky)\r\n    - IP sticky (multiple processes, one master and workers with serving sticky by IP)\r\n  - URL routing based on file system\r\n    - Caching server-side executable JavaScript in memory\r\n    - Filesystem watching for cache reloading when file changes on disk\r\n  - API development support (simple way for JSON-based WEB-services development)\r\n    - RPC-style API (Stateful, state stored in memory between requests)\r\n    - REST-style API (Stateless, each call is separate, no state in memory)\r\n  - Server server-side templating\r\n    - Caching templates in memory and ready (rendered) pages optional caching\r\n    - Value rendering with @VariableName@ syntax, absolute and relative addressing\r\n    - Array and hash iterations with @[arrayName]@ and @[/arrayName]@ syntax\r\n    - Including sub-templates @[includeTemplate]@ syntax\r\n    - Template personalization for user groups\r\n  - Config changes with zero downtime\r\n    - Flexible configuration in JSON file\r\n    - File watch and automatic soft reloading when config.js file changes\r\n    - No Impress server hard restarting\r\n  - Serving static files\r\n    - Gzipping and HTTP request field \"if-modified-since\" field support and HTTP 304 \"Not Modified\" answer\r\n    - Memory caching and filesystem watching for cache reloading when files changed on disk\r\n    - JavaScript optional (configurable) minification, based on module \"uglify-js\" as Impress plugin\r\n  - Built-in sessions support with authentication and user groups and anonymous sessions\r\n    - Sessions and cookies (memory state or persistent sessions with MongoDB)\r\n    - Access modifiers for each folder in access.js files and access inheritance\r\n  - Implemented SSE (Server-Sent Events) with channels and multicast\r\n  - Reverse-proxy (routing request to external HTTP server with URL-rewriting)\r\n  - Logging: \"access\", \"debug\", \"error and \"slow\" logs\r\n    - Log rotation: keep logs N days (configurable) delete files after N days\r\n    - Log buffering, write stream flushing interval\r\n  - Connection drivers for database engines:\r\n    - MySQL data access layer based on felixge/mysql low-level drivers (separate module \"musql-utilities\")\r\n      - MySQL Data Access Methods: queryRow, queryValue, queryCol, queryHash, queryKeyValue\r\n      - MySQL Introspection Methods: primary, foreign, constraints, fields, databases, tables, databaseTables, tableInfo, indexes, processes, globalVariables, globalStatus, users\r\n      - MySQL SQL Autogenerating Methods: select, insert, update, upsert, count, delete\r\n      - Events: 'query', 'slow'\r\n    - MongoDB drivers as Impress plugin\r\n    - Memcached drivers as Impress plugin\r\n    - MySQL schema generator from JSON database schemas\r\n  - Sending Emails functionality using \"nodemailer\" module as Impress plugin\r\n  - IPC support (interprocess communications) for event delivery between Node.js instances\r\n  - Integrated DBMI (Web-based management interface for MySQL and MongoDB)\r\n  - GeoIP support, based on \"geoip-lite\" module as Impress plugin (uses MaxMind database)\r\n\r\n## Configuration\r\n\r\n1. Install module using npm\r\n2. Edit config.js file in project folder (or leave it untouched if you want just to test Impress)\r\n3. If you want to store persistent sessions in MongoDB you need this DBMS installed and you need to run \"node setup.js\" before starting Impress\r\n4. Run Impress using command \"node server.js\"\r\n\r\n## Handler examples and file system url mapping\r\n\r\n1. Template example\r\nLocation: http://localhost\r\nBase template: /sites/localhost/html.template\r\n2. Override included \"left.template\"\r\nLocation: http://localhost/override\r\nOverriden template: /sites/localhost/override/left.template\r\nBase template: /sites/localhost/html.template\r\nHandler: /sites/localhost/request.js\r\n3. JSON api method example\r\nLocation: http://localhost/api/examples/methodName.json\r\nHandler: /sites/localhost/api/examples/methodName.json/get.js\r\n4. Start anonymous session\r\nLocation: http://localhost/api/auth/anonymousSession.json\r\nHandler: /sites/localhost/api/auth/anonymousSession.json/get.js\r\n5. POST request handler\r\nLocation: POST http://localhost/api/auth/regvalidation.json\r\nHandler: /sites/localhost/api/auth/regvalidation.json/post.js\r\n6. MongoDB access example\r\nLocation: http://localhost/api/examples/getUsers.json\r\nHandler: /sites/localhost/api/examples/getUsers.json/get.js\r\n\r\n## Example\r\n\r\nFollowing \"server.js\" is stating file. Run it using command line \"node server\" for debug or \"nohup node server\" for production.\r\n```javascript\r\nrequire('impress');\r\nimpress.init(function() {\r\n\t// Place here other initialization code\r\n\t// to be executed after Impress initialization\r\n});\r\n```\r\n\r\nFile \"access.js\" is something line \".htaccess\", you can easily define access restrictions for each folder, placing \"access.js\" in it.\r\nIf folder not contains \"access.js\" it will inherit from parent folder and so on. Example:\r\n```javascript\r\nmodule.exports = {\r\n\tguests: true, // allow requests from not logged users\r\n\tlogged: true, // allow requests from logged users\r\n\thttp:   true, // allow requests using http protocol\r\n\thttps:  true, // allow requests using https protocol (SSL)\r\n\tgroups: []    // allow access for user groups listed in array\r\n\t              // or for all if array is empty or no groups field specified\r\n}\r\n```\r\n\r\nFile \"request.js\": place such file in folder to be executed on each request (GET, POST, PUT, etc.).\r\nIf folder not contains \"request.js\" it will inherit from parent folder and so on. Example:\r\n```javascript\r\nmodule.exports = function(req, res, callback) {\r\n\tres.context.data = {\r\n\t\ttitle: \"Page Title\",\r\n\t\tusers: [\r\n\t\t\t{\r\n\t\t\t\tname: \"vasia\", age: 22,\r\n\t\t\t\temails: [\"user1@gmail.com\", \"user2@gmail.com\"]\r\n\t\t\t},{\r\n\t\t\t\tname: \"dima\", age: 32,\r\n\t\t\t\temails: [\"user3@gmail.com\", \"user4@gmail.com\", \"user5@gmail.com\"]\r\n\t\t\t}\r\n\t\t],\r\n\t\tsession: JSON.stringify(impress.sessions[req.impress.session])\r\n\t};\r\n\tcallback();\r\n}\r\n```\r\n\r\nFile \"get.js\": place such file in folder to be executed on GET request. For POST request \"post.js\", and so on.\r\nIf folder not contains \"get.js\" it will inherit from parent folder and so on. Example:\r\n```javascript\r\nmodule.exports = function(req, res, callback) {\r\n\tdb.polltool.query('select * from City', function(err, rows, fields) {\r\n\t\tif (err) throw err;\r\n\t\tres.context.data = { rows:rows, fields:fields };\r\n\t\tcallback();\r\n\t});\r\n}\r\n```\r\n\r\nFile \"html.template\": place such file in folder as a main page template. Example:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\t<title>@title@</title>\r\n</head>\r\n<body>\r\n\t<div>\r\n\t\tField value: @field@\r\n\t</div>\r\n\t<div>\r\n\t\tInclude template: @[name]@ - this will include file \"./name.template\"\r\n\t</div>\r\n\t<div>\r\n\t\tThis will iterate \"res.context.data\" from \"request.js\" example above:\r\n\t\t@[users]@\r\n\t\t\t<div>\r\n\t\t\t\tUser name: @.name@<br/>\r\n\t\t\t\tUser age: @.age@<br/>\r\n\t\t\t\tEmail addresses:\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t@[emails]@\r\n\t\t\t\t\t\t<li>@.value@</li>\r\n\t\t\t\t\t@[/emails]@\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t@[/users]@\r\n\t</div>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Contributors \r\n\r\n  - Timur Shemsedinov (marcusaurelius)\r\n  - Sergey Andriyaschenko (tblasv)\r\n\r\n## License \r\n\r\nDual licensed under the MIT or RUMI licenses.\r\n\r\nCopyright (c) 2012-2013 MetaSystems &lt;timur.shemsedinov@gmail.com&gt;\r\n\r\nLicense: RUMI\r\n\r\nDo you know what you are?\r\nYou are a manuscript of a divine letter.\r\nYou are a mirror reflecting a noble face.\r\nThis universe is not outside of you.\r\nLook inside yourself;\r\neverything that you want,\r\nyou are already that.\r\n\r\nJalal ad-Din Muhammad Rumi\r\n\"Hush, Don't Say Anything to God: Passionate Poems of Rumi\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}